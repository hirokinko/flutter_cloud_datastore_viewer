// Mocks generated by Mockito 5.0.10 from annotations
// in flutter_cloud_datastore_viewer/test/clouddatastore_repository_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;

import 'package:flutter_cloud_datastore_viewer/patched_datastore/v1.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: comment_references
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeProjectsResource extends _i1.Fake implements _i2.ProjectsResource {}

class _FakeProjectsIndexesResource extends _i1.Fake
    implements _i2.ProjectsIndexesResource {}

class _FakeProjectsOperationsResource extends _i1.Fake
    implements _i2.ProjectsOperationsResource {}

class _FakeAllocateIdsResponse extends _i1.Fake
    implements _i2.AllocateIdsResponse {}

class _FakeBeginTransactionResponse extends _i1.Fake
    implements _i2.BeginTransactionResponse {}

class _FakeCommitResponse extends _i1.Fake implements _i2.CommitResponse {}

class _FakeGoogleLongrunningOperation extends _i1.Fake
    implements _i2.GoogleLongrunningOperation {}

class _FakeLookupResponse extends _i1.Fake implements _i2.LookupResponse {}

class _FakeReserveIdsResponse extends _i1.Fake
    implements _i2.ReserveIdsResponse {}

class _FakeRollbackResponse extends _i1.Fake implements _i2.RollbackResponse {}

class _FakeRunQueryResponse extends _i1.Fake implements _i2.RunQueryResponse {}

/// A class which mocks [DatastoreApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatastoreApi extends _i1.Mock implements _i2.DatastoreApi {
  MockDatastoreApi() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ProjectsResource get projects =>
      (super.noSuchMethod(Invocation.getter(#projects),
          returnValue: _FakeProjectsResource()) as _i2.ProjectsResource);
}

/// A class which mocks [ProjectsResource].
///
/// See the documentation for Mockito's code generation for more information.
class MockProjectsResource extends _i1.Mock implements _i2.ProjectsResource {
  MockProjectsResource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ProjectsIndexesResource get indexes =>
      (super.noSuchMethod(Invocation.getter(#indexes),
              returnValue: _FakeProjectsIndexesResource())
          as _i2.ProjectsIndexesResource);
  @override
  _i2.ProjectsOperationsResource get operations =>
      (super.noSuchMethod(Invocation.getter(#operations),
              returnValue: _FakeProjectsOperationsResource())
          as _i2.ProjectsOperationsResource);
  @override
  _i3.Future<_i2.AllocateIdsResponse> allocateIds(
          _i2.AllocateIdsRequest? request, String? projectId,
          {String? $fields}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #allocateIds, [request, projectId], {#$fields: $fields}),
              returnValue: Future<_i2.AllocateIdsResponse>.value(
                  _FakeAllocateIdsResponse()))
          as _i3.Future<_i2.AllocateIdsResponse>);
  @override
  _i3.Future<_i2.BeginTransactionResponse> beginTransaction(
          _i2.BeginTransactionRequest? request, String? projectId,
          {String? $fields}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #beginTransaction, [request, projectId], {#$fields: $fields}),
              returnValue: Future<_i2.BeginTransactionResponse>.value(
                  _FakeBeginTransactionResponse()))
          as _i3.Future<_i2.BeginTransactionResponse>);
  @override
  _i3.Future<_i2.CommitResponse> commit(
          _i2.CommitRequest? request, String? projectId, {String? $fields}) =>
      (super.noSuchMethod(
          Invocation.method(#commit, [request, projectId], {#$fields: $fields}),
          returnValue:
              Future<_i2.CommitResponse>.value(_FakeCommitResponse())) as _i3
          .Future<_i2.CommitResponse>);
  @override
  _i3.Future<_i2.GoogleLongrunningOperation> export(
          _i2.GoogleDatastoreAdminV1ExportEntitiesRequest? request,
          String? projectId,
          {String? $fields}) =>
      (super.noSuchMethod(
          Invocation.method(#export, [request, projectId], {#$fields: $fields}),
          returnValue: Future<_i2.GoogleLongrunningOperation>.value(
              _FakeGoogleLongrunningOperation())) as _i3
          .Future<_i2.GoogleLongrunningOperation>);
  @override
  _i3.Future<_i2.GoogleLongrunningOperation> import(
          _i2.GoogleDatastoreAdminV1ImportEntitiesRequest? request,
          String? projectId,
          {String? $fields}) =>
      (super.noSuchMethod(
          Invocation.method(#import, [request, projectId], {#$fields: $fields}),
          returnValue: Future<_i2.GoogleLongrunningOperation>.value(
              _FakeGoogleLongrunningOperation())) as _i3
          .Future<_i2.GoogleLongrunningOperation>);
  @override
  _i3.Future<_i2.LookupResponse> lookup(
          _i2.LookupRequest? request, String? projectId, {String? $fields}) =>
      (super.noSuchMethod(
          Invocation.method(#lookup, [request, projectId], {#$fields: $fields}),
          returnValue:
              Future<_i2.LookupResponse>.value(_FakeLookupResponse())) as _i3
          .Future<_i2.LookupResponse>);
  @override
  _i3.Future<_i2.ReserveIdsResponse> reserveIds(
          _i2.ReserveIdsRequest? request, String? projectId,
          {String? $fields}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #reserveIds, [request, projectId], {#$fields: $fields}),
              returnValue: Future<_i2.ReserveIdsResponse>.value(
                  _FakeReserveIdsResponse()))
          as _i3.Future<_i2.ReserveIdsResponse>);
  @override
  _i3.Future<_i2.RollbackResponse> rollback(
          _i2.RollbackRequest? request, String? projectId, {String? $fields}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #rollback, [request, projectId], {#$fields: $fields}),
              returnValue:
                  Future<_i2.RollbackResponse>.value(_FakeRollbackResponse()))
          as _i3.Future<_i2.RollbackResponse>);
  @override
  _i3.Future<_i2.RunQueryResponse> runQuery(
          _i2.RunQueryRequest? request, String? projectId, {String? $fields}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #runQuery, [request, projectId], {#$fields: $fields}),
              returnValue:
                  Future<_i2.RunQueryResponse>.value(_FakeRunQueryResponse()))
          as _i3.Future<_i2.RunQueryResponse>);
}
